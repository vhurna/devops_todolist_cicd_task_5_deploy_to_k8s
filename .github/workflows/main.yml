name: python-deployment

run-name: ${{ github.actor }} - ${{ github.ref_name }} - ${{ github.sha }}

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  PythonVersion: 3.8
  DockerImageName: ${{ secrets.DOCKERHUB_USERNAME }}/todoapp

jobs:
  python-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PythonVersion }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PythonVersion }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage flake8
          pip install -r requirements.txt

      - name: Run tests
        run: python manage.py test

      - name: Generate report
        run: |
          coverage run --source='.' manage.py test
          coverage report

      - name: Linting
        run: flake8 . --show-source --statistics --exit-zero

      - name: Check complexity
        run: flake8 . --exit-zero --max-complexity=6

      - name: Upload python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-artifacts
          path: .

      - name: Upload helm artifacts
        if: github.ref_name == 'main'
        uses: actions/upload-artifact@v4
        with:
          name: helm-artifacts
          path: ${{ github.workspace }}/helm-charts

  docker-ci:
    name: Build and Push Image
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' }}
    needs: python-ci
    steps:
      - name: Download python artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-artifacts
          path: .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./src
          push: true
          tags: ${{ env.DockerImageName }}:${{ github.sha }}

  helm-ci:
    name: Helm CI
    runs-on: ubuntu-latest
    needs: python-ci
    if: ${{ github.ref_name == 'main' }}
    steps:
      - name: Download helm artifacts
        uses: actions/download-artifact@v4
        with:
          name: helm-artifacts
          path: .

      - name: Set Up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Lint Helm
        run: helm lint ./todoapp/

      - name: Template Helm
        run: helm template todoapp ./todoapp/ -f ./todoapp/values.yaml

      - name: Package Helm
        run: helm package ./todoapp

      - name: Upload Helm package
        uses: actions/upload-artifact@v4
        with:
          name: helm-package
          path: ./*.tgz

  deploy-kind-dev:
    name: Deploy to Development (Kind)
    needs: [docker-ci, helm-ci]
    uses: ./.github/workflows/deploy-kind.yml
    secrets: inherit
    with:
      environment: development

  deploy-kind-staging:
    name: Deploy to Staging (Kind)
    needs: deploy-kind-dev
    uses: ./.github/workflows/deploy-kind.yml
    secrets: inherit
    with:
      environment: staging

---

name: deploy-to-kind

run-name: Deploy to ${{ inputs.environment }}

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: string
      kind-config:
        description: 'Path to Kind cluster config file'
        required: false
        type: string
        default: './cluster.yml'
      helm-package:
        description: 'Helm package glob pattern'
        required: false
        type: string
        default: '*.tgz'
      release-name:
        description: 'Helm release name'
        required: false
        type: string
        default: 'todoapp'

jobs:
  deploy-kind:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download Helm package
        uses: actions/download-artifact@v4
        with:
          name: helm-package
          path: .

      - name: Install Kind CLI
        run: |
          curl -Lo kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x kind
          sudo mv kind /usr/local/bin/

      - name: Create Kind cluster
        run: kind create cluster --config ${{ inputs.kind-config }}

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v4

      - name: Set up Helm CLI
        uses: azure/setup-helm@v4.2.0

      - name: Helm install (dry-run)
        run: helm install ${{ inputs.release-name }} ${{ inputs.helm-package }} --dry-run

      - name: Helm upgrade/install (atomic)
        run: helm upgrade --install ${{ inputs.release-name }} ${{ inputs.helm-package }} --atomic --wait --timeout 300s

name: python-deployment

run-name: ${{ github.actor }} - ${{ github.ref_name }} - ${{ github.sha }}

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  PythonVersion: 3.8
  DockerImageName: ${{ secrets.DOCKERHUB_USERNAME }}/todoapp

jobs:
  python-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PythonVersion }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PythonVersion }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage flake8
          pip install -r requirements.txt

      - name: Run tests
        run: python manage.py test

      - name: Generate report
        run: |
          coverage run --source='.' manage.py test
          coverage report

      - name: Linting
        run: flake8 . --show-source --statistics --exit-zero

      - name: Check complexity
        run: flake8 . --exit-zero --max-complexity=6

      - name: Upload python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-artifacts
          path: .

      - name: Upload helm artifacts
        if: github.ref_name == 'main'
        uses: actions/upload-artifact@v4
        with:
          name: helm-artifacts
          path: ${{ github.workspace }}/helm-charts

  docker-ci:
    name: Build and Push Image
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' }}
    needs: python-ci
    steps:
      - name: Download python artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-artifacts
          path: .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./src
          push: true
          tags: ${{ env.DockerImageName }}:${{ github.sha }}

  helm-ci:
    name: Helm CI
    runs-on: ubuntu-latest
    needs: python-ci
    if: ${{ github.ref_name == 'main' }}
    steps:
      - name: Download helm artifacts
        uses: actions/download-artifact@v4
        with:
          name: helm-artifacts
          path: .

      - name: Set Up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Lint Helm
        run: helm lint ./todoapp/

      - name: Template Helm
        run: helm template todoapp ./todoapp/ -f ./todoapp/values.yaml

      - name: Package Helm
        run: helm package ./todoapp

      - name: Upload Helm package
        uses: actions/upload-artifact@v4
        with:
          name: helm-package
          path: ./*.tgz

  deploy-kind-dev:
    name: Deploy to Development (Kind)
    needs: [docker-ci, helm-ci]
    uses: ./.github/workflows/deploy-kind.yml
    secrets: inherit
    with:
      environment: development

  deploy-kind-staging:
    name: Deploy to Staging (Kind)
    needs: deploy-kind-dev
    uses: ./.github/workflows/deploy-kind.yml
    secrets: inherit
    with:
      environment: staging

---

name: deploy-to-kind

run-name: Deploy to ${{ inputs.environment }}

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: string
      kind-config:
        description: 'Path to Kind cluster config file'
        required: false
        type: string
        default: './cluster.yml'
      helm-package:
        description: 'Helm package glob pattern'
        required: false
        type: string
        default: '*.tgz'
      release-name:
        description: 'Helm release name'
        required: false
        type: string
        default: 'todoapp'

jobs:
  deploy-kind:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download Helm package
        uses: actions/download-artifact@v4
        with:
          name: helm-package
          path: .

      - name: Install Kind CLI
        run: |
          curl -Lo kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x kind
          sudo mv kind /usr/local/bin/

      - name: Create Kind cluster
        run: kind create cluster --config ${{ inputs.kind-config }}

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v4

      - name: Set up Helm CLI
        uses: azure/setup-helm@v4.2.0

      - name: Helm install (dry-run)
        run: helm install ${{ inputs.release-name }} ${{ inputs.helm-package }} --dry-run

      - name: Helm upgrade/install (atomic)
        run: helm upgrade --install ${{ inputs.release-name }} ${{ inputs.helm-package }} --atomic --wait --timeout 300s
